;This file is automatically generated by the MergeScenarios tool.: 
;Do not edit it!

;Scenario merged from: C:\Dev\AHK\RetroMultiManager\Tools\..\Scenarios\CloseDofusInstances.ahk
+F12::
CloseDofusInstances:
    Loop % API.GetTotalWindows()
        API.CloseWindow(A_Index)
    API.ResetWindowsIndex()
return

;Scenario merged from: C:\Dev\AHK\RetroMultiManager\Tools\..\Scenarios\LoginAccounts.ahk
/*
    Scenario LoginAccounts
    Will perform one OCR scan to find account input. 
    If it fails, it tries to load from default values (TO DO)
*/

LoginAccounts:
    inputX := 0
    inputY := 0
    
    GUI_UpdateBar(0)
    Loop, % API.GetTotalWindows() {
        window := API.GetWindow(A_Index)
        window.Activate()
        window.Maximize()
        Sleep, 50 * oSettings.Speed
        If (A_Index = 1)
        {
            If (oSettings.EnableOCR = True)
                Gosub, GetAccountInputPosition
            If (!inputX || !inputY || inputX = 0 || inputY = 0)
            {
                Logger.WriteError("LoginAccounts: OCR failed or disabled. Trying to get account input position from default settings.")
                IniRead, inputX, Resources\%A_ScreenHeight%p\window.ini, InputAccount, x, 0
                IniRead, inputY, Resources\%A_ScreenHeight%p\window.ini, InputAccount, y, 0
                If (inputX = "0" || inputY = "0")
                {
                    Logger.WriteError("LoginAccounts: Couldn't load account input position from INI, stopping current scenario.", 1)
                    return
                }
            }
            Else
                Logger.Write("LoginAccounts: Image successfully found with position [." . inputX . "," . inputY . "].")
        }
        MouseMove, inputX, inputY + 70, 5 * oSettings.Speed
        Click
        Sleep, 50 * oSettings.Speed
        SendRaw, % API.GetUsername(A_Index)
        Sleep, 50 * oSettings.Speed
        Send, {Tab}
        Sleep, 50 * oSettings.Speed
        SendRaw, % API.GetPassword(A_Index)
        Sleep, 50 * oSettings.Speed
        Send, {Tab}
        Sleep, 50 * oSettings.Speed
        ;Send {Enter}
        GUI_UpdateBar(A_Index, API.GetTotalWindows())
        SleepHandler(0) ;handle sleep based on speed settings (parameter is for added sleep)
    }
    GUI_UpdateBar(100)
    return

GetAccountInputPosition:
    MouseMove, 0, 0
    Sleep 1000 * oSettings.Speed
    API.SearchImageInWindow("account.png", inputX, inputY)
    Sleep 1500 * oSettings.Speed
    return

/*
LoginAccounts:
    WinGet, windows, List, Dofus
    Loop, %windows% {
        window := windows%A_Index%
        WinActivate, ahk_id %window%
        WinWaitActive, ahk_id %window%
        Sleep 50
        id := nbInstances - %A_Index% + 1
        WinSetTitle, %id%
        Click, 30,100
        Send, {Tab}
        Sleep 50
        SendRaw, % username[id]
        Sleep 50
        Send, {Tab}
        Sleep 50
        SendRaw, % password[id]
        Sleep 50
        ;Send {Enter}
        Sleep 300
        WinMaximize, ahk_id %window%
    }
return
*/

;Scenario merged from: C:\Dev\AHK\RetroMultiManager\Tools\..\Scenarios\OpenDofusInstances.ahk
OpenDofusInstances:
    GUI_UpdateText("Opening Dofus instances...")
    GUI_UpdateBar(0)

    API.ClearWindowList()
    nbAccounts := API.GetTotalAccounts()
    Loop % nbAccounts {
        Run, % oSettings.DofusPath,,, pid
        
        API.WindowList[A_Index] := New API.Window(pid)
        API.WindowList[A_Index].WaitOpen()
        API.WindowList[A_Index].SetTitle(ArrayAccounts[A_Index])
        GUI_UpdateBar(A_Index, nbAccounts)
        SleepHandler(0)
    }
    GUI_UpdateBar(100)
    GUI_UpdateText("Done.")
    return

